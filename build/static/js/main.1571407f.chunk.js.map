{"version":3,"sources":["components/Navbar/Navbar.js","components/Home/Home.js","components/Contests/Contests.js","components/Contests/CreateContest.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","state","isLoggedIn","userName","fetch","then","response","json","data","setState","logged","username","AppBar","position","Toolbar","Typography","variant","to","style","flexGrow","this","getAuthComponent","Button","color","href","Component","Home","rows","Object","keys","ConstestData","forEach","key","push","Contests","Container","fixed","number_of_con","TableContainer","component","Paper","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","row","name","scope","project","start_date","end_date","Link","createdby","target","rel","CreateContest","getSteps","getStepContent","step","TextField","id","label","required","multiline","fullWidth","utils","DateFnsUtils","DateTimePicker","showTodayButton","inputVariant","onChange","onendDate","handleNext","activeStep","handleBack","event","endDate","Date","toISOString","startDate","Stepper","index","Step","StepLabel","length","disabled","onClick","App","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1571407f.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { \n    AppBar,\n    Typography,\n    Button,\n    Toolbar\n} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoggedIn: false,\n            userName: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('/api/profile')\n            .then(response => response.json())\n            .then(data => this.setState({ \n                isLoggedIn: data.logged,\n                userName: data.username\n            })\n        );\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            Wiki Contest\n                        </Typography>\n                        <Typography variant=\"h6\">\n                            <Link to=\"/\">Home</Link>\n                        </Typography>\n                        <Typography variant=\"h6\" style={{ flexGrow: 1}}>\n                            <Link to=\"/contests\">Contests</Link>\n                        </Typography>\n                        {this.getAuthComponent()}\n                    </Toolbar>\n                </AppBar>\n            </Fragment>\n        );\n    }\n\n    getAuthComponent() {\n        // https://reactjs.org/docs/conditional-rendering.html#element-variables\n\n        const isLoggedIn = this.state.isLoggedIn;\n        let button;\n\n        if (isLoggedIn) {\n            button = <Button color=\"secondary\" href=\"https://wikicontest.toolforge.org/logout\"> {this.state.userName}, Logout</Button>;\n        }\n        else {\n            button = <Button color=\"inherit\" href=\"https://wikicontest.toolforge.org/login\">Login</Button>;\n        }\n        return button;\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\n\nclass Home extends Component{\n    render(){\n        return (\n            <h1>Home</h1>\n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { \n    Container,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    Link\n}  from '@material-ui/core';\nimport ConstestData from '../../contests.json';\n\nconst rows = [];\nObject.keys(ConstestData).forEach(function(key) {\n    if ( key !== \"number_of_con\") {\n        rows.push(ConstestData[key]);\n    }\n});\n\nconst getUserLink = (project, name ) => {\n    return \"https://\" + project + \".wikipedia.org/wiki/User:\"+ name;\n}\n\nclass Contests extends Component{\n    render(){\n        return (\n            <Container fixed>\n                <br />\n                <br />\n                <Typography variant=\"h5\">\n                    Total Contest:- {ConstestData.number_of_con}\n                </Typography>\n                <TableContainer component={Paper}>\n                    <Table style={{minWidth: 650}}>\n                        <TableHead>\n                        <TableRow>\n                            <TableCell>Contest Name</TableCell>\n                            <TableCell align=\"right\">Language</TableCell>\n                            <TableCell align=\"right\">Start Date</TableCell>\n                            <TableCell align=\"right\">End Date</TableCell>\n                            <TableCell align=\"right\">Created By</TableCell>\n                        </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {rows.map(row => (\n                            <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.project}</TableCell>\n                            <TableCell align=\"right\">{row.start_date} UTC</TableCell>\n                            <TableCell align=\"right\">{row.end_date} UTC</TableCell>\n                            <TableCell align=\"right\">\n                                <Link href={getUserLink( row.project, row.createdby )} \n                                    target=\"_blank\" rel=\"noopener\">\n                                    {row.createdby}\n                                </Link>\n                            </TableCell>\n                            </TableRow>\n                        ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        )\n    }\n}\n\nexport default Contests;","import React, { Component, Fragment } from 'react';\nimport {\n    Container,\n    Stepper,\n    Step,\n    StepLabel,\n    Button,\n    Typography,\n    TextField\n} from '@material-ui/core';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  DateTimePicker\n} from '@material-ui/pickers';\n\nclass CreateContest extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeStep: 0,\n            startDate: '',\n            endDate: ''\n        };\n    }\n\n    getSteps = () => {\n        return ['Basic Info', 'Timeline', 'Settings'];\n    }\n\n    getStepContent = (step) => {\n        switch (step) {\n            case 0:\n                return (\n                    <Fragment>\n                        <TextField \n                            id=\"contest-name\" \n                            label=\"Contest name\"\n                            required\n                        />\n                        <br/>\n                        <br/>\n                        <br/>\n                        <TextField\n                            name=\"contest-description\"\n                            label=\"Contest Description\"\n                            multiline\n                            fullWidth\n                            rows=\"7\"\n                            variant=\"outlined\"\n                        />\n                    </Fragment>\n                );\n            case 1:\n                return (\n                    <Fragment>\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                            <DateTimePicker\n                                name=\"startDate\"\n                                showTodayButton\n                                inputVariant=\"outlined\"\n                                label=\"Start Date/Time (UTC)\"\n                            />\n                            <br />\n                            <br />\n                            <DateTimePicker\n                                name=\"endDate\"\n                                showTodayButton\n                                inputVariant=\"outlined\"\n                                label=\"End Date/Time (UTC)\"\n                                onChange={this.onendDate}\n                            />\n                            <br />\n                            <br />\n                        </MuiPickersUtilsProvider>\n                    </Fragment>\n                );\n            case 2:\n                return 'This is the bit I really care about!';\n            default:\n                return 'Unknown step';\n        }\n    }\n\n    handleNext = () => {\n        this.setState({ activeStep: this.state.activeStep + 1});\n    };\n\n    handleBack = () => {\n        this.setState({ activeStep: this.state.activeStep - 1 });\n    };\n\n    onendDate = (event) => {\n        this.setState({ endDate: new Date(event).toISOString() } )\n    }\n\n    render(){\n        return (\n            <Container fixed>\n                <h1>Create Contest</h1>\n                <Stepper activeStep={this.state.activeStep}>\n                    {this.getSteps().map((label, index) => {\n                        return (\n                            <Step key={label}>\n                                <StepLabel>{label}</StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n                <Container fixed>\n                    {this.state.activeStep === this.getSteps().length ? (\n                    <div>\n                        <Typography>\n                        All steps completed - you&apos;re finished\n                        </Typography>\n                    </div>\n                    ): (\n                        <div>\n                            {this.getStepContent(this.state.activeStep)}\n                            <br />\n                            <br />\n                            <br />\n                            {this.state.endDate}\n                            <div>\n                            <Button \n                                variant=\"outlined\" \n                                disabled={this.state.activeStep === 0}\n                                onClick={this.handleBack}\n                            >\n                                Back\n                            </Button>\n\n                            <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                onClick={this.handleNext}\n                            >\n                                {this.state.activeStep === this.getSteps().length - 1 ? 'Finish' : 'Next'}\n                            </Button>\n                            </div>\n                        </div>\n                    )}\n                </Container>\n            </Container>\n        )\n    }\n}\n\nexport default CreateContest;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport NavBar from './components/Navbar/Navbar';\nimport Home from './components/Home/Home';\nimport Contests from './components/Contests/Contests';\nimport CreateContest from './components/Contests/CreateContest';\n\n\nfunction App() {\n    return (\n      <Router>\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/contests\" component={Contests} />\n          <Route path=\"/createcontest\" component={CreateContest} />\n        </Switch>\n      </div>\n      </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}